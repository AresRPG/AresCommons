import proguard.gradle.ProGuardTask
import java.util.concurrent.TimeUnit

buildscript {
    repositories(){
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.2.1'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group = 'fr.aresrpg'
version = '0.6'

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8
targetCompatibility = 1.8

TimeUnit randomizeDictionaryUnit = TimeUnit.DAYS;
long randomizeDictionaryValue = 7;
long randomizeReleaseRandomNumber = 5658914;
long randomizeDevelopRandomNumber = 4658624;
boolean release = Boolean.valueOf(System.getProperty("release"));
long randomizeRandomNumber = release ? randomizeReleaseRandomNumber : randomizeDevelopRandomNumber;
String obfuscationOut = (jar.destinationDir.getPath() + "/" + jar.baseName + "-" + jar.version + "-obfuscated.jar");

sourceSets {
    jmh
    shared //Shared between test and jmh
}

jar {
    version = System.getenv("BUILD_NUMBER") == null ? project.version : System.getenv("BUILD_NUMBER");
}

clean {
    delete 'proguard.dictionary.random' , 'proguard.map'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    testCompile sourceSets.shared.output
    testCompile 'junit:junit:4.12'

    jmhCompile sourceSets.main.output
    jmhCompile sourceSets.shared.output
    jmhCompile 'org.openjdk.jmh:jmh-core:1.12'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.12'
}

task shaded(type: Jar) {
    classifier = 'shaded'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task jmh(type:JavaExec) {
    description 'Execute jmh on this project'
    main 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.runtimeClasspath
}

task jmhJar(type: Jar) {
    classifier = "jmh"

    manifest {
        attributes 'Implementation-Title': 'JMH FastReflection Benchmark',
                'Implementation-Version': version,
                'Main-Class': 'org.openjdk.jmh.Main'
    }

    from configurations.jmhCompile.collect {
        it.mkdirs();
        it.isDirectory() ?
                it :
                zipTree(it)
    }

    from sourceSets.jmh.output
}

idea {
    module {
        scopes.PROVIDED.plus  += [configurations.jmhCompile , configurations.sharedCompile]
    }
}

eclipse {
    classpath {
        plusConfigurations += [configurations.jmhCompile , configurations.sharedCompile]
    }
}

task randomizeDictionary(){
    File out = file("proguard.dictionary.random");
    File inf = file("proguard.dictionary");
    onlyIf{!out.exists()}
    doLast {
        Random rdm = new Random(((long)(System.currentTimeMillis()/randomizeDictionaryUnit.toMillis(randomizeDictionaryValue)))*randomizeRandomNumber/*time/unit*stupid number*/);
        List<String> lines = inf.readLines();
        def linesMap = [:]
        lines.each { line -> linesMap.put(line , rdm.nextInt(Integer.MAX_VALUE)) };
        lines.sort{a,b -> linesMap[a] <=> linesMap[b]}
        out.createNewFile();
        lines.each {line -> out.append(line + '\n'); }
    }
}

task obfuscate(type: ProGuardTask , dependsOn:[jar, randomizeDictionary]){
    configuration 'proguard.conf'

    injars jar.archivePath.getPath()
    outjars obfuscationOut
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publish.dependsOn obfuscate

publishing {
    repositories {
        maven {
            name 'main'
            if(release)
                url 'https://artifactory.aresrpg.fr/release';
            else
                url 'https://artifactory.aresrpg.fr/develop';
            credentials {
                username project.hasProperty('aresuser') ? aresuser : System.getenv('aresuser')
                password project.hasProperty('arespass') ? arespass : System.getenv('arespass')
            }
        }

        maven {
            name 'mapping'
            if(release)
                url 'https://artifactory.aresrpg.fr/release-mappings';
            else
                url 'https://artifactory.aresrpg.fr/develop-mappings';

            credentials {
                username project.hasProperty('aresuser') ? aresuser : System.getenv('aresuser')
                password project.hasProperty('arespass') ? arespass : System.getenv('arespass')
            }
        }
        maven {
            name 'libraries'
            url 'https://artifactory.aresrpg.fr/libraries'

            credentials {
                username project.hasProperty('aresuser') ? aresuser : System.getenv('aresuser')
                password project.hasProperty('arespass') ? arespass : System.getenv('arespass')
            }
        }

    }

    publications {
        obf(MavenPublication) {
            artifact file(obfuscationOut)
            ext.repo = 'main'
        }

        lib(MavenPublication) {
            artifact jar
            artifact javadocJar
            ext.repo = "libraries"
        }

        mapping(MavenPublication) {
            artifact file('proguard.map')
            ext.repo = 'mapping'
        }
    }
}

afterEvaluate {
    tasks.withType(PublishToMavenRepository) { task ->
        if (task.publication.hasProperty('repo') && task.publication.repo != task.repository.name) {
            task.enabled = false
            task.group = null
        }
    }
}